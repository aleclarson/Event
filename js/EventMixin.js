// Generated by CoffeeScript 1.12.4
var Event, Type, frozen, mixin, spliceArray;

frozen = require("Property").frozen;

spliceArray = require("spliceArray");

Type = require("Type");

Event = require("./Event");

module.exports = function(type, eventTypes) {
  var kind;
  if (!type._hasEvents) {
    frozen.define(type, "_hasEvents", {
      value: true
    });
    kind = type._kind;
    if (!(kind && kind.prototype.__hasEvents)) {
      mixin.apply(type);
    }
  }
  return type.initInstance(function() {
    var argTypes, eventName, events, options;
    events = this.__events;
    for (eventName in eventTypes) {
      argTypes = eventTypes[eventName];
      if (events[eventName]) {
        continue;
      }
      options = argTypes ? {
        argTypes: argTypes
      } : {};
      events[eventName] = Event(options);
    }
  });
};

mixin = Type.Mixin();

mixin.defineValues(function() {
  return {
    __events: Object.create(null)
  };
});

mixin.definePrototype({
  __hasEvents: true
});

mixin.defineMethods({
  emit: function(eventName) {
    var event;
    event = this.__events[eventName];
    if (event === void 0) {
      throw Error("Event does not exist: '" + eventName + "'");
    }
    return event.applyEmit(spliceArray(arguments, 1));
  },
  on: function(eventName, callback) {
    var event;
    event = this.__events[eventName];
    if (event === void 0) {
      throw Error("Event does not exist: '" + eventName + "'");
    }
    return event(callback);
  },
  once: function(eventName, callback) {
    var event;
    event = this.__events[eventName];
    if (event === void 0) {
      throw Error("Event does not exist: '" + eventName + "'");
    }
    return event(1, callback);
  }
});
